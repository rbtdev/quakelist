{"version":3,"sources":["logo.svg","components/Earthquake.jsx","components/Feed.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Earthquake","state","data","this","props","color","properties","mag","quakeStyle","padding","marginTop","marginBottom","borderRadius","backgroundColor","_isNew","border","magStyle","position","width","bottom","display","textAlign","react_default","a","createElement","style","fontSize","place","moment","time","format","fromNow","Component","CHECK_FEED_MS","FEEDS","HOUR_ALL","DAY_2_5","QuakeList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","isOpen","_this$props","quakes","newCount","onClear","length","concat","whiteSpace","overflow","map","quake","components_Earthquake","Feed","firstLoad","earthquakes","newQuakeCount","feedInfo","testQuakes","countDown","fetchQuakes","_callee","response","feed","oldQuakes","newQuakes","regenerator_default","wrap","_context","prev","next","fetch","sent","json","features","_this2","toConsumableArray","forEach","_","differenceBy","find","_quake","id","sort","b","setState","metadata","stop","setInterval","_this3","marginLeft","title","Feed_QuakeList","App","className","components_Feed","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b3865e59.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport moment from 'moment';\nclass Earthquake extends Component {\n  state = {};\n\n  render() {\n    let { data } = this.props;\n    let color = 'red'\n    if (data.properties.mag < 3) color = 'green';\n    else if (data.properties.mag >= 3 && data.properties.mag < 5) color = 'blue';\n    else if (data.properties.mag >=5 && data.properties.mag < 7) color = 'orange';\n    let quakeStyle = {\n      padding: '6px',\n      marginTop: '3px',\n      marginBottom: '3px',\n      borderRadius: '3px',\n      backgroundColor: data._isNew?'lightgreen':'white',\n      border: '1px solid gray'\n    }\n    let magStyle = {\n      position:'relative',\n      width: '15%',\n      bottom: '10px',\n      display: 'inline-block',\n      color: color,\n      textAlign: 'center'\n    }\n    let placeStyle = {}\n    let timeStyle = {}\n    let infoStyle = {\n      fontSize: 'smaller',\n      display: 'inline-block',\n      width: '90%',\n    }\n    return (\n      <div style = {quakeStyle}>\n          <div style = {magStyle}>{data.properties.mag}</div>\n          <div style = {infoStyle}>\n            <div style = {placeStyle}>{data.properties.place}</div>\n            <div style = {timeStyle}>\n              {moment(data.properties.time).format(\"MMM DD YYYY HH:mm:ss.SSS\")} (about {moment(data.properties.time).fromNow()})</div>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default Earthquake;\n","import React, { Component } from \"react\";\nimport Earthquake from \"./Earthquake\";\nimport _ from 'lodash';\n\nconst CHECK_FEED_MS = 60000; // 1 min\nconst FEEDS = {\n  HOUR_ALL: 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_hour.geojson',\n  DAY_2_5: 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_day.geojson'\n}\nclass QuakeList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: true\n    }\n  }\n\n  render() {\n    let { isOpen } = this.state;\n    let { quakes, newCount, onClear } = this.props;\n    return (\n      <div style={{ textAlign: 'left', marginTop: \"20px\" }}>\n        <div>{quakes.length} Earthquake{quakes.length !== 1 ? 's' : ''} {newCount ? `(${newCount} new)` : ''}</div>\n        {(quakes.length && isOpen) ?\n          <div>\n            <div style={{\n              textAlign: 'left',\n              width: '450px',\n              whiteSpace: 'nowrap',\n              overflow: 'hidden',\n            }}>\n              {quakes.map(quake => (<Earthquake data={quake} />))}\n            </div>\n          </div>\n          : null}\n      </div>\n    )\n  }\n}\n\nclass Feed extends Component {\n  state = {\n    firstLoad: true,\n    earthquakes: [],\n    newQuakeCount: 0,\n    feedInfo: null,\n    testQuakes: [],\n    countDown: CHECK_FEED_MS / 1000\n  };\n\n  earthquakes = [];\n  fetchQuakes = async () => {\n    let response = await fetch(FEEDS.HOUR_ALL);\n    let feed = await response.json();\n    let earthquakes = feed.features;\n    let oldQuakes = [];\n    let newQuakes = [];\n    if (!this.state.firstLoad) {\n      oldQuakes = [...this.state.earthquakes];\n      oldQuakes.forEach(quake => { quake._isNew = false });\n      newQuakes = _.differenceBy(feed.features, oldQuakes, 'id');\n      newQuakes.forEach(quake => { \n        let newQuake = earthquakes.find(_quake => (quake.id === _quake.id));\n        newQuake._isNew = true\n      });\n\n      earthquakes\n        .sort((a, b) => (b.properties.time - a.properties.time));\n    }\n\n    this.setState({ firstLoad: false, countDown: CHECK_FEED_MS / 1000, feedInfo: feed.metadata, newQuakeCount: newQuakes.length, earthquakes });\n\n  };\n\n  async componentDidMount() {\n    this.fetchQuakes();\n    setInterval(this.fetchQuakes, CHECK_FEED_MS);\n    setInterval(() => { this.setState({ countDown: this.state.countDown - 1 }) }, 1000)\n  }\n\n  render() {\n    return (\n      <div style={{ textAlign: 'left', marginLeft: '40px', width: '600px'}}>\n        <div style={{ fontSize: 'larger'}}>\n          {this.state.feedInfo && this.state.feedInfo.title}\n        </div>\n        <div>\n          Checking USGS in {this.state.countDown} seconds\n        </div>\n        <QuakeList\n          quakes={this.state.earthquakes}\n          newCount={this.state.newQuakeCount}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Feed;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Feed from \"./components/Feed\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Feed />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}