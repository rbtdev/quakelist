{"version":3,"sources":["logo.svg","components/Earthquake.jsx","components/Feed.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Earthquake","state","_this$props","this","props","data","currentLocation","quakeLocation","longitude","geometry","coordinates","latitude","dist","getDistance","color","properties","mag","mStr","quakeStyle","padding","marginTop","marginBottom","borderRadius","backgroundColor","_isNew","border","magStyle","position","width","bottom","display","textAlign","react_default","a","createElement","style","onClick","window","open","url","parseFloat","toFixed","fontSize","place","moment","time","format","fromNow","Math","round","Component","CHECK_FEED_MS","FEEDS","title","QuakeList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","isOpen","quakes","newCount","length","concat","whiteSpace","overflow","map","quake","components_Earthquake","Feed","_this2","fetchQuakes","asyncToGenerator","regenerator_default","mark","_callee","currentFeed","response","feed","earthquakes","oldQuakes","newQuakes","countDown","wrap","_context","prev","next","fetch","sent","json","features","firstLoad","toConsumableArray","forEach","_","differenceBy","find","_quake","id","sort","b","clearInterval","countdownTimer","clearTimeout","fetchTimer","setTimeout","setInterval","setState","feedInfo","metadata","newQuakeCount","stop","changeFeed","bind","assertThisInitialized","testQuakes","e","target","value","_this3","onChange","i","Feed_QuakeList","App","location","navigator","geolocation","watchPosition","console","log","coords","className","components_Feed","React","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.745daa18.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport moment from 'moment';\nimport { getDistance } from 'geolib';\n\nclass Earthquake extends Component {\n  state = {};\n\n  render() {\n    let mag = mStr => (parseFloat(mStr).toFixed(1))\n    let { data, currentLocation } = this.props;\n    let quakeLocation = {\n      longitude: data.geometry.coordinates[0],\n      latitude: data.geometry.coordinates[1],\n    }\n    debugger\n    let dist = (currentLocation ? getDistance(currentLocation, quakeLocation): 0) / 1609.344;\n    let color = 'red'\n    if (data.properties.mag < 3) color = 'green';\n    else if (data.properties.mag >= 3 && data.properties.mag < 5) color = 'blue';\n    else if (data.properties.mag >=5 && data.properties.mag < 7) color = 'orange';\n    let quakeStyle = {\n      padding: '6px',\n      marginTop: '3px',\n      marginBottom: '3px',\n      borderRadius: '3px',\n      backgroundColor: data._isNew?'lightgreen':'white',\n      border: '1px solid gray',\n    }\n    let magStyle = {\n      position:'relative',\n      width: '15%',\n      bottom: '18px',\n      display: 'inline-block',\n      color: color,\n      textAlign: 'center'\n    }\n    let placeStyle = {}\n    let timeStyle = {}\n    let infoStyle = {\n      fontSize: 'smaller',\n      display: 'inline-block',\n      width: '90%',\n    }\n    return (\n      <div style = {quakeStyle} onClick = {() => window.open(data.properties.url, '_blank')}>\n          <div style = {magStyle}>{mag(data.properties.mag)}</div>\n          <div style = {infoStyle}>\n            <div style = {placeStyle}>{data.properties.place}</div>\n            <div style = {timeStyle}>\n              {moment(data.properties.time).format(\"MMM DD YYYY HH:mm:ss.SSS\")} ({moment(data.properties.time).fromNow()})\n            </div>\n            <div>\n              {Math.round(dist)} miles\n            </div>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default Earthquake;\n","import React, { Component } from \"react\";\nimport Earthquake from \"./Earthquake\";\nimport _ from 'lodash';\n\nconst CHECK_FEED_MS = 60000; // 1 min\nconst FEEDS = [\n  {\n    title: 'Last Hour: Significant Earthquakes',\n    url: 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/significant_hour.geojson'\n  },\n  {\n    title: 'Last Hour: >= Mag 4.5',\n    url: 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/4.5_hour.geojson'\n  },\n  {\n    title: 'Last Hour: >= Mag 2.5',\n    url: 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_hour.geojson'\n  },\n  {\n    title: 'Last Hour: >= 1.0',\n    url: 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/1.0_hour.geojson'\n  },\n  {\n    title: 'Last Hour: All',\n    url: 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_hour.geojson'\n  },\n\n\n  {\n    title: 'Last Day: Significant Earthquakes',\n    url: 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/significant_day.geojson'\n  },\n  {\n    title: 'Last Day: >= Mag 4.5',\n    url: 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/4.5_day.geojson'\n  },\n  {\n    title: 'Last Day: >= Mag 2.5',\n    url: 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_day.geojson'\n  },\n  {\n    title: 'Last Day: >= 1.0',\n    url: 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/1.0_day.geojson'\n  },\n  {\n    title: 'Last Day: All',\n    url: 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_day.geojson'\n  },\n\n  {\n    title: 'Last Week: Significant Earthquakes',\n    url: 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/significant_week.geojson'\n  },\n  {\n    title: 'Last Week: >= Mag 4.5',\n    url: 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/4.5_week.geojson'\n  },\n  {\n    title: 'Last Week: >= Mag 2.5',\n    url: 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_week.geojson'\n  },\n  {\n    title: 'Last Week: >= 1.0',\n    url: 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/1.0_week.geojson'\n  },\n  {\n    title: 'Last Week: All',\n    url: 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.geojson'\n  },\n\n  {\n    title: 'Last Month: Significant Earthquakes',\n    url: 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/significant_month.geojson'\n  },\n  {\n    title: 'Last Month: >= Mag 4.5',\n    url: 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/4.5_month.geojson'\n  },\n  {\n    title: 'Last Month: >= Mag 2.5',\n    url: 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_month.geojson'\n  },\n  {\n    title: 'Last Month: >= 1.0',\n    url: 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/1.0_month.geojson'\n  },\n  {\n    title: 'Last Month: All',\n    url: 'https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_month.geojson'\n  }\n]\nclass QuakeList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: true\n    }\n  }\n\n  render() {\n    let { isOpen } = this.state;\n    let { quakes, newCount, currentLocation } = this.props;\n    return (\n      <div style={{ textAlign: 'left', marginTop: \"20px\" }}>\n        <div>{quakes.length} Earthquake{quakes.length !== 1 ? 's' : ''} {newCount ? `(${newCount} new)` : ''}</div>\n        {(quakes.length && isOpen) ?\n          <div>\n            <div style={{\n              textAlign: 'left',\n              width: '100%',\n              whiteSpace: 'nowrap',\n              overflow: 'hidden',\n            }}>\n              {quakes.map(quake => (<Earthquake data={quake} currentLocation={currentLocation} />))}\n            </div>\n          </div>\n          : null}\n      </div>\n    )\n  }\n}\n\nclass Feed extends Component {\n  constructor(props) {\n    super(props);\n\n    this.changeFeed = this.changeFeed.bind(this);\n    this.fetchQuakes = this.fetchQuakes.bind(this);\n\n    this.state = {\n      firstLoad: true,\n      earthquakes: [],\n      newQuakeCount: 0,\n      feedInfo: null,\n      testQuakes: [],\n      countDown: CHECK_FEED_MS / 1000,\n      currentFeed: 7\n    };\n\n    this.earthquakes = [];\n    this.fetchTimer = null;\n    this.countdownTimer = null;\n  }\n\n  fetchQuakes = async () => {\n    let { currentFeed } = this.state;\n    let response = await fetch(FEEDS[currentFeed].url);\n    let feed = await response.json();\n    let earthquakes = feed.features;\n    let oldQuakes = [];\n    let newQuakes = [];\n    if (!this.state.firstLoad) {\n      oldQuakes = [...this.state.earthquakes];\n      oldQuakes.forEach(quake => { quake._isNew = false });\n      newQuakes = _.differenceBy(feed.features, oldQuakes, 'id');\n      newQuakes.forEach(quake => {\n        let newQuake = earthquakes.find(_quake => (quake.id === _quake.id));\n        newQuake._isNew = true\n      });\n    }\n\n    earthquakes.sort((a, b) => (b.properties.time - a.properties.time));\n    clearInterval(this.countdownTimer);\n    clearTimeout(this.fetchTimer);\n    let countDown = CHECK_FEED_MS / 1000;\n    if (currentFeed > 16) {\n      countDown = -1;\n    }\n    else {\n      this.fetchTimer = setTimeout(this.fetchQuakes, CHECK_FEED_MS);\n      this.countdownTimer = setInterval(() => { this.setState({ countDown: this.state.countDown - 1 }) }, 1000)\n    } \n    this.setState({ firstLoad: false, countDown , feedInfo: feed.metadata, newQuakeCount: newQuakes.length, earthquakes });\n  };\n\n  changeFeed(e) {\n    let currentFeed = e.target.value;\n    let firstLoad = true;\n    this.setState({ currentFeed, firstLoad });\n  }\n\n  render() {\n    let refreshMessage = () => {\n      if (this.state.countDown >= 0) return (\n          <span>\n            Checking USGS in {this.state.countDown} seconds\n          </span>\n      )\n      else return (\n          <span>\n            Auto refresh disabled for this feed\n          </span>\n      )\n    }\n\n    if (this.state.firstLoad) this.fetchQuakes();\n\n    let { currentLocation } = this.props;\n    return (\n      <div style={{ textAlign: 'left', width: '100%' }}>\n        <div>\n          <select id=\"feed-select\" value={this.state.currentFeed} onChange={this.changeFeed}>\n            {FEEDS.map((feed, i) => (\n              <option value={i}>{feed.title}</option>\n            ))}\n          </select>\n        </div>\n        <div style={{ fontSize: 'larger' }}>\n          {this.state.feedInfo && this.state.feedInfo.title}\n        </div>\n        <div>\n          {refreshMessage()}\n          <span>\n            <button onClick={this.fetchQuakes}>Refresh</button>\n          </span>\n        </div>\n        <QuakeList\n          currentLocation = {currentLocation}\n          quakes={this.state.earthquakes}\n          newCount={this.state.newQuakeCount}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Feed;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Feed from \"./components/Feed\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      location: null\n    }\n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      navigator.geolocation.watchPosition((position) => {\n        console.log(position)\n        let currentLocation = { latitude: position.coords.latitude, longitude: position.coords.longitude};\n        this.setState({ location: currentLocation })\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Feed currentLocation = {this.state.location} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}